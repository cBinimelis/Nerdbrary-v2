@page "/Juegos/edit"
@page "/Juegos/edit/{Id_Juego:int}"
@inject IJuegoData juegoData
@inject IJSRuntime JS
@inject IGeneroJuegoData generoJuegoData
@inject NavigationManager NavigationManager


<div class="container">
    <!--Comprobar si se está editando o creando un elemento, para saber que informacion mostrar-->
    @if (Id_Juego is null)
    {
        <PageTitle>Agregar un nuevo anime</PageTitle>
        <h1>Agregar un nuevo anime</h1>
    }
    else
    {
        <PageTitle>Editar "@CurrentJuego.Nombre"</PageTitle>
        <h1>Editar "@CurrentJuego.Nombre"</h1>
    }

    <div class="p-4"></div>

    <div class="row">
        <EditForm Model="CurrentJuego" OnSubmit="HandleSubmit" FormName="JuegoForm">
            <div class="row">
                <div class="col col-md-4 col-md-offset-4">
                    <!-- Text input-->
                    <div class="form-group">
                        <label for="name">Nombre</label>
                        <InputText id="name" @bind-Value="CurrentJuego.Nombre" class="form-control" />
                    </div>

                    <!-- Select input-->
                    <div class="form-group">
                        <label class="control-label" for="selectinput">Genero:</label>
                        <InputSelect class="form-control" id="selectinput" @bind-Value="CurrentJuego.IdGeneroJuego">
                            <option value="">Genero Juego...</option>
                            @if (generoJuego != null)
                            {
                                @foreach (var genero in generoJuego)
                                {
                                    <option value="@genero.IdGeneroJuego">@genero.Descripcion</option>
                                }
                            }
                        </InputSelect>
                    </div>

                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-sm-2 control-label" for="otrostgeneros">Otros:</label>
                        <InputText id="otrostgeneros" @bind-Value="CurrentJuego.OtrosGeneros" class="form-control" />
                    </div>

                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-sm-2 control-label" for="lanzamiento">Estreno:</label>
                        <InputDate id="lanzamiento" @bind-Value="CurrentJuego.Lanzamiento" class="form-control" />
                    </div>

                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-sm-2 control-label" for="imagen">Imagen:</label>
                        <InputFile @ref="inputFile" OnChange="@LoadFile" id="imagen" @bind-Value="CurrentJuego.Imagen" class="form-control" />
                    </div>
                </div>
                <div class="col col-md-8 col-md-offset-8">
                    <label class="control-label" for="textinput">Sinopsis</label>
                    <div>
                        <InputTextArea @bind-Value="CurrentJuego.Sinopsis" class="form-control" style="height: 350px"></InputTextArea>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="pt-3 d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" @onclick="@(() => Delete(CurrentJuego.IdJuego))" class="btn btn-outline-danger w-25">Eliminar</button>
                        <button type="button" @onclick="@(() => BackToJuego())" class="btn btn-outline-primary w-25">Cancelar</button>
                        <button type="submit" class="btn btn-primary w-50">Guardar</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@if (Id_Juego is not null)
{
    <div class="container p-2">
        <img class="img-fluid" @ref="previewImageElem" src="img/games/@CurrentJuego.Imagen" alt="Vista previa de la imagen" />
    </div>
}
else
{
    <div class="container p-2">
        <img class="img-fluid" @ref="previewImageElem" src="img/GamesBG.png" alt="Vista previa de la imagen" />
    </div>
}

<script>
    window.previewImage = (inputElem, imgElem) => {
        const url = URL.createObjectURL(inputElem.files[0]);
        imgElem.addEventListener('load', () => URL.revokeObjectURL(url), { once: true });
        imgElem.src = url;
    }
</script>

@code {
    [Parameter]
    public int? Id_Juego { get; set; }

    [SupplyParameterFromForm]
    public Juego CurrentJuego { get; set; } = new();

    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private IBrowserFile browserFile;

    List<GeneroJuego>? generoJuego;

    protected override async Task OnInitializedAsync()
    {
        generoJuego = await generoJuegoData.GetAllGeneroJuegoAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id_Juego is not null)
        {
            var anime = await juegoData.GetJuegoAsync((int)Id_Juego);
            if (anime is not null)
            {
                CurrentJuego = anime;
            }
        }
    }

    async void HandleSubmit()
    {
        if (Id_Juego is not null)
        {
            await juegoData.UpdateJuegoAsync(CurrentJuego, (int)Id_Juego);
            BackToJuego();
        }
        else
        {
            if (inputFile != null)
            {
                try
                {
                    //Crear imagen en el servidor
                    await CreateImage();
                    CurrentJuego.Activo = true;
                    CurrentJuego.IdEstadoJuego = 1;
                    await juegoData.AddJuegoAsync(CurrentJuego);
                    BackToJuego();
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("alert", ex.Message);
                }
            }
        }
    }

    private async Task CreateImage()
    {
        //Se utiliza Regex para eliminar todos los caracteres especiales, además se deja todo en minúsculas,
        //esto para poder tener una nomenclatura estandar en el nombre de los archivos.
        string newFileName = Regex.Replace(CurrentJuego.Nombre, @"[^0-9a-zA-Z_]+", "").ToLower();

        string extension = browserFile.ContentType.Replace("image/", ".");

        //Se comprueba la extension, en caso de no ser la requerida, se devuelve una excepción para cancelar el
        //método actual y aquellos que lo estén utilizando
        if (extension == ".jpg" || extension == ".jpeg")
        {
            newFileName += extension;
            var path = Path.Combine(@"wwwroot/img/anime/", newFileName);

            await using FileStream fs = new(path, FileMode.Create);
            await browserFile.OpenReadStream().CopyToAsync(fs);
            CurrentJuego.Imagen = newFileName;
        }
        else
        {
            throw new FileLoadException();
        }
    }

    //Adicional de cargar la vista previa, se carga el archivo a la variable correspondiente
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        await ShowPreview();
        browserFile = e.File;
    }

    void Delete(int id)
    {
        // TODO - crear metodo para eliminar elementos con confirmación
    }

    private async Task ShowPreview() => await JS.InvokeVoidAsync(
        "previewImage", inputFile!.Element, previewImageElem);

    void BackToJuego()
    {
        NavigationManager.NavigateTo("/Juegos");
    }
}